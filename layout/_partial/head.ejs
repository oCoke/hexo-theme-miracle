<%
var joinStr = theme.global.title_join_string
var title = config.title
if (page.title) {
    title = [page.title, title].join(joinStr)
}
%>

<head>
    <meta charset="UTF-8">
    <% if (theme.global.dns_prefetch){ %>
    <link rel="dns-prefetch" href="<%= theme.global.dns_prefetch %>">
    <% } %>
    <link rel="apple-touch-icon" sizes="76x76" href="<%- url_for(theme.global.apple_touch_icon) %>">
    <link rel="icon" type="image/png" href="<%- url_for(theme.global.favicon) %>">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <title><%= title %></title>
    <% if (theme.global.force_https) { %>
    <meta http-equiv="Content-Security-Policy" content="upgrade-insecure-requests">
    <% } %>
    <% if(theme.global.font.css){ %>
    <link href="<%- theme.global.font.css %>" rel="stylesheet">
    <% } %>
    <meta name="description" content="<%= page.excerpt || config.description %>">
    <meta name="author" content="<%= page.author || config.author %>">
    <meta name="keywords" content="<%= config.keywords %>">
    <%- partial('_partial/style.ejs') %>
    <link rel="preload" href="<%- theme.static_prefix.jquery %>jquery.slim.min.js" as="script">
    <script src="<%- theme.static_prefix.jquery %>jquery.slim.min.js"></script>
    <link rel="stylesheet" href="/css/main.css" media="print" onload="this.media='all';this.onload=null">
    <noscript><link rel="stylesheet" href="/css/main.css"></noscript>
    <%- theme.custom.header_html %>
    <script>
        function loadScript(isAsync, url, cb, isMoudule) {
            var script = document.createElement('script');
            script.src = url;
            if (cb) script.onload = cb;
            if (isMoudule) script.type = 'module';
            if (!isAsync){isAsync = true};
            script.async = isAsync;
            document.body.appendChild(script);
        }
        setTimeout (function () {
            var cssLoadingEle = document.getElementById("css-loading");
            cssLoadingEle.innerHTML = "<h3 style='text-align:center;'>加载中...</h3>";
        },200);

        function query(selector) {
            return Array.from(document.querySelectorAll(selector));
        }
    </script>
    <% if (theme.theme.darkmode){ %>
        <script>
        (() => {
          const rootElement = document.documentElement;
          const darkModeStorageKey = 'user-color-scheme';
          const darkModeMediaQueryKey = '--color-mode';
          const rootElementDarkModeAttributeName = 'data-user-color-scheme';
      
          const setLS = (k, v) => {
              try {
                  localStorage.setItem(k, v);
              } catch (e) {}
          };
      
          const removeLS = (k) => {
              try {
                  localStorage.removeItem(k);
              } catch (e) {}
          };
      
          const getLS = (k) => {
              try {
                  return localStorage.getItem(k);
              } catch (e) {
                  return null;
              }
          };
      
          const getModeFromCSSMediaQuery = () => {
              const res = getComputedStyle(rootElement).getPropertyValue(darkModeMediaQueryKey);
              if (res.length) return res.replace(/["'\s]/g, '');
              return res === 'dark' ? 'dark' : 'light';
          };
      
          const resetRootDarkModeAttributeAndLS = () => {
              rootElement.removeAttribute(rootElementDarkModeAttributeName);
              removeLS(darkModeStorageKey);
          };
      
          const validColorModeKeys = {
              dark: true,
              light: true,
          };
      
          const applyCustomDarkModeSettings = (mode) => {
              const currentSetting = mode || getLS(darkModeStorageKey);
      
              if (currentSetting === getModeFromCSSMediaQuery()) {
                  resetRootDarkModeAttributeAndLS();
              } else if (validColorModeKeys[currentSetting]) {
                  rootElement.setAttribute(rootElementDarkModeAttributeName, currentSetting);
              } else {
                  resetRootDarkModeAttributeAndLS();
              }
          };
      
          const invertDarkModeObj = {
              dark: 'light',
              light: 'dark',
          };
      
          const toggleCustomDarkMode = () => {
              var currentSetting = getLS(darkModeStorageKey);
      
              if (validColorModeKeys[currentSetting]) {
                  currentSetting = invertDarkModeObj[currentSetting];
              } else if (currentSetting === null) {
                  currentSetting = invertDarkModeObj[getModeFromCSSMediaQuery()];
              } else {
                  return;
              }
              setLS(darkModeStorageKey, currentSetting);
      
              return currentSetting;
          };
      
          applyCustomDarkModeSettings();
      
          $(document).ready(function () {
            const darkModeToggleBottonElement = document.getElementById('btn-toggle-dark');
              darkModeToggleBottonElement.addEventListener('click', () => {
                  applyCustomDarkModeSettings(toggleCustomDarkMode());
              });
          })
      })();
        </script>
        <% } %>
        
</head>
